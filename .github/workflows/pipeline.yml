name: CI/CD House ALarm System WebApp

on: [push]

jobs:
  app_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install pylint
    - name: Analysing the code with pylint
      run: |
       pylint --disable=E0401 --disable=C0114 --disable=W0107 --disable=C0103 --ignore-paths="^web/*" python_server/*.py
  codacy_security_scan:
    needs: app_build
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      security-events: write 
      actions: read
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
  container_build:
    needs: codacy_security_scan
    runs-on: ubuntu-latest
    steps:
    - name: Codacy Security Scan
    - uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to registry
      uses: docker/login-action@v2
      with:
        registry: https://pinit.azurecr.io/
        username: ${{ secrets.AzureAppService_ContainerUsername_e35ac8ffb2864df1a6e54e449e0c3343 }}
        password: ${{ secrets.AzureAppService_ContainerPassword_ea39954dcdb74fa4b0334e519cebe5d5 }}
    - name: Build and push container image to registry
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: pinit.azurecr.io/${{ secrets.AzureAppService_ContainerUsername_e35ac8ffb2864df1a6e54e449e0c3343 }}/pinit-azure:${{ github.sha }}
        file: ./Dockerfile
  contailer_deployment:
    runs-on: ubuntu-latest
    needs: container_build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'pinit'
        slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_62dd8154624b438eb986469a79add630 }}
        images: 'pinit.azurecr.io/${{ secrets.AzureAppService_ContainerUsername_e35ac8ffb2864df1a6e54e449e0c3343 }}/pinit-azure:${{ github.sha }}'

